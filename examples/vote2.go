/*
 * Copyright (C) 2018 The ontology Authors
 * This file is part of The ontology library.
 *
 * The ontology is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Lesser General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * The ontology is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public License
 * along with The ontology.  If not, see <http://www.gnu.org/licenses/>.
 */
package main

import (
	"fmt"
	"github.com/ontio/ontology-go-sdk"
	"github.com/ontio/ontology/common"
	"time"
)

var GasPrice = uint64(0)

func main() {
	sdk := ontology_go_sdk.NewOntologySdk()
	sdk.NewRpcClient().SetAddress("http://polaris1.ont.io:20336")
	//sdk.NewRpcClient().SetAddress("http://127.0.0.1:20336")

	wallet, err := sdk.OpenWallet("./wallet3.dat")
	if err != nil {
		fmt.Println("OpenWallet error:", err)
		return
	}
	acc1, err := wallet.GetAccountByAddress("AbtTQJYKfQxq4UdygDsbLVjE8uRrJ2H3tP", []byte("111111"))
	if err != nil {
		fmt.Printf("OpenWallet error: %s", err)
		return
	}
	fmt.Println("acc1", acc1.Address.ToHexString())
	acc2, err := wallet.GetAccountByAddress("Ac9JHT6gFh6zxpfv4Q7ZPLD4xLhzcpRTWt", []byte("111111"))
	if err != nil {
		fmt.Printf("OpenWallet error: %s", err)
		return
	}

	code2 := ""
	code2Bs, _ := common.HexToBytes(code2)
	contractAddr := common.AddressFromVmCode(code2Bs)
	fmt.Println("contractAddr:", contractAddr.ToHexString())
	deployCode, err := sdk.GetSmartContract(contractAddr.ToHexString())
	if err != nil && err.Error() != "JsonRpcResponse error code:44004 desc:UNKNOWN CONTRACT result:\"UNKNOWN CONTRACT\"" {
		fmt.Printf("GetSmartContract error: %s", err)
		return
	}

	if deployCode == nil {
		hash, err := sdk.NeoVM.DeployNeoVMSmartContract(GasPrice, 210000000, acc1, true, code2,
			"name", "version", "author", "email", "desc")
		if err != nil {
			fmt.Printf("DeployNeoVMSmartContract error: %s", err)
			return
		}

		time.Sleep(time.Duration(6) * time.Second)
		event, err := sdk.GetSmartContractEvent(hash.ToHexString())
		if err != nil {
			fmt.Printf("GetSmartContractEvent error: %s", err)
			return
		}
		fmt.Println("deploy event:", event)
	}

	vote := &Vote{
		Sdk:          sdk,
		ContractAddr: contractAddr,
		Acc1:         acc1,
		Acc2:         acc2,
	}

	vote.ContractAddr, _ = common.AddressFromHexString("2d2e4909b44eafaa1bfca78e51e31dc523caf4f8")

	fmt.Println("")
	fmt.Println("******init****")
	vote.invoke("init", []interface{}{})

	fmt.Println("")
	fmt.Println("******setAdmin****")
	vote.invoke("setAdmin", []interface{}{[]interface{}{acc1.Address, acc2.Address}})

	fmt.Println("")
	fmt.Println("******listAdmins****")
	vote.preInvoke("listAdmins", []interface{}{})

	fmt.Println("")
	fmt.Println("******createTopic****")
	vote.invoke("createTopic", []interface{}{acc1.Address, "16", 1577947303, 1602259200})
	fmt.Println("TopicHash:", common.ToHexString(vote.TopicHash))

	fmt.Println("")
	fmt.Println("******setVoterForTopic****")
	vote.invoke("setVoterForTopic", []interface{}{vote.TopicHash,
		[]interface{}{[]interface{}{acc1.Address, 100}, []interface{}{acc2.Address, 1000}}})

	fmt.Println("")
	fmt.Println("******getVoters****")
	vote.preInvoke("getVoters", []interface{}{vote.TopicHash})

	fmt.Println("")
	fmt.Println("******voteTopic****")
	vote.invoke("voteTopic", []interface{}{vote.TopicHash, acc1.Address, true})

	//fmt.Println("")
	//fmt.Println("******listTopics****")
	//vote.preInvoke("listTopics", []interface{}{})
	//
	//fmt.Println("")
	//fmt.Println("******getTopic****")
	//vote.preInvoke("getTopic", []interface{}{vote.TopicHash})

	fmt.Println("")
	fmt.Println("******getTopicInfo****")
	vote.preInvoke("getTopicInfo", []interface{}{vote.TopicHash})

	fmt.Println("")
	fmt.Println("******voteTopic****")
	vote.invoke("voteTopic", []interface{}{vote.TopicHash, acc2.Address, false})

	fmt.Println("")
	fmt.Println("******getTopicInfo****")
	vote.preInvoke("getTopicInfo", []interface{}{vote.TopicHash})

	//fmt.Println("")
	//fmt.Println("******listTopics****")
	//vote.preInvoke("listTopics", []interface{}{})
	//

	//fmt.Println("")
	//fmt.Println("******voteTopic****")
	//vote.invoke("voteTopic", []interface{}{vote.TopicHash, acc1.Address})
	//vote.invoke("voteTopic", []interface{}{vote.TopicHash, acc1.Address})
	//vote.invoke("voteTopic", []interface{}{vote.TopicHash, acc1.Address})
}

type Vote struct {
	Sdk          *ontology_go_sdk.OntologySdk
	ContractAddr common.Address
	Acc1         *ontology_go_sdk.Account
	Acc2         *ontology_go_sdk.Account
	TopicHash    []byte
}

func (v *Vote) invoke(method string, args []interface{}) {
	hash, err := v.Sdk.NeoVM.InvokeNeoVMContract(GasPrice, 2000000, v.Acc2, v.Acc1, v.ContractAddr,
		[]interface{}{method, args})
	if err != nil {
		fmt.Printf("InvokeNeoVMContract error: %s\n", err)
		return
	}
	time.Sleep(time.Duration(6) * time.Second)
	event, err := v.Sdk.GetSmartContractEvent(hash.ToHexString())
	if err != nil {
		fmt.Printf("GetSmartContractEvent error: %s", err)
		return
	}
	fmt.Println("Event notify:", event)
	if method == "createTopic" {
		for _, notify := range event.Notify {
			addr, _ := common.AddressFromHexString(notify.ContractAddress)
			if addr == v.ContractAddr {
				temp, _ := notify.States.([]interface{})
				t := temp[1].(string)
				tbs, _ := common.HexToBytes(t)
				v.TopicHash = tbs
				fmt.Println("Event notify:", temp)
			}
		}
	}
}

func (v *Vote) preInvoke(method string, args []interface{}) {
	res, err := v.Sdk.NeoVM.PreExecInvokeNeoVMContract(v.ContractAddr,
		[]interface{}{method, args})
	if err != nil {
		fmt.Printf("InvokeNeoVMContract error: %s\n", err)
		return
	}
	if method == "getTopicStatus" {
		r, _ := res.Result.ToString()
		fmt.Println("PreExecInvokeNeoVMContract result:", r)
	} else {
		fmt.Println("PreExecInvokeNeoVMContract result:", res.Result)
	}
}
