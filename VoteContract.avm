"from ontology.interop.System.Action import RegisterAction\nfrom ontology.interop.Ontology.Runtime import Base58ToAddress\nfrom ontology.interop.System.Storage import Get, GetContext, Put\nfrom ontology.builtins import sha256, concat\nfrom ontology.interop.System.Runtime import Serialize, Deserialize, Log, CheckWitness\n\n# vote status\nSTATUS_NOT_FOUND = 'not found'\nSTATUS_VOTING = 'voting'\nSTATUS_END = 'end'\n\nPRE_TOPIC = '01'\nPRE_MIN_AMOUNT = '02'\nPRE_VOTER = '03'\nPRE_VOTED = '04'\n\nKEY_ALL_TOPIC = 'all_topic'\n\nctx = GetContext()\nADMIN = Base58ToAddress(\"AbtTQJYKfQxq4UdygDsbLVjE8uRrJ2H3tP\")\n\nCreateTopicEvent = RegisterAction(\"createTopic\", \"hash\", \"topic\")\nVoteTopicEvent = RegisterAction(\"voteTopic\", \"hash\", \"voter\")\n\n\ndef Main(operation, args):\n    \"\"\"\n    only admin can invoke\n    \"\"\"\n    if operation == 'createTopic':\n        Require(len(args) == 1)\n        topic = args[0]\n        return createTopic(topic)\n    if operation == 'setVoterForTopic':\n        Require(len(args) == 2)\n        hash = args[0]\n        voters = args[1]\n        return setVoterForTopic(hash, voters)\n    if operation == 'listTopics':\n        Require(len(args) == 0)\n        return listTopics()\n    if operation == 'getTopic':\n        Require(len(args) == 1)\n        hash = args[0]\n        return getTopic(hash)\n    if operation == 'getVoters':\n        Require(len(args) == 1)\n        hash = args[0]\n        return getVoters(hash)\n    if operation == 'voteTopic':\n        Require(len(args) == 2)\n        hash = args[0]\n        voter = args[1]\n        return voteTopic(hash, voter)\n    if operation == 'getTopicStatus':\n        Require(len(args) == 1)\n        hash = args[0]\n        return getTopicStatus(hash)\n    return False\n\n\n# ****only admin can invoke*********\n# create a voting topic\ndef createTopic(topic):\n    RequireWitness(ADMIN)\n    hash = sha256(topic)\n    key = getKey(PRE_TOPIC, hash)\n    data = Get(ctx, key)\n    if data:\n        return False\n    topicInfo = [topic, STATUS_VOTING, 0]\n    Put(ctx, key, Serialize(topicInfo))\n    bs = Get(ctx, KEY_ALL_TOPIC)\n    if bs:\n        topics = Deserialize(bs)\n    else:\n        topics = []\n    topics.append(topic)\n    bs = Serialize(topics)\n    Put(ctx, KEY_ALL_TOPIC, bs)\n    CreateTopicEvent(hash, topic)\n    return True\n\n\n# def setMinAmountForVote(hash,value):\n#     RequireWitness(ADMIN)\n#     Require(value > 0)\n#     key = getKey(PRE_MIN_AMOUNT, hash)\n#     Put(key,value)\n\ndef setVoterForTopic(hash, voters):\n    RequireWitness(ADMIN)\n    key = getKey(PRE_VOTER, hash)\n    info = Get(ctx, key)\n    if info:\n        return False\n    Put(ctx, key, Serialize(voters))\n    return True\n\n\n# ****user can invoke method ***********\ndef listTopics():\n    bs = Get(ctx, KEY_ALL_TOPIC)\n    topics = Deserialize(bs)\n    return topics\n\n\ndef getTopic(hash):\n    key = getKey(PRE_TOPIC, hash)\n    info = Get(ctx, key)\n    if info == None:\n        return []\n    return Deserialize(info)\n\n\ndef getVoters(hash):\n    key = getKey(PRE_VOTER, hash)\n    info = Get(ctx, key)\n    if info == None:\n        return False\n    voters = Deserialize(info)\n    return voters\n\n\ndef voteTopic(hash, voter):\n    RequireWitness(voter)\n    Require(isValidVoter(hash, voter))\n    Require(hasVoted(hash, voter) == False)\n    topicInfo = getTopic(hash)\n    if len(topicInfo) < 3:\n        return False\n    if topicInfo[1] != STATUS_VOTING:\n        return False\n    topicInfo[2] += 1\n    voters = getVoters(hash)\n    if topicInfo[2] > len(voters) / 2:\n        topicInfo[1] = STATUS_END\n    keyTopic = getKey(PRE_TOPIC, hash)\n    Put(ctx, keyTopic, Serialize(topicInfo))\n    VoteTopicEvent(hash, voter)\n    return True\n\n\ndef getTopicStatus(hash):\n    key = getKey(PRE_TOPIC, hash)\n    info = Get(ctx, key)\n    if info == None:\n        return STATUS_NOT_FOUND\n    topicInfo = Deserialize(info)\n    return topicInfo[1]\n\n\ndef isValidVoter(hash, voter):\n    voters = getVoters(hash)\n    for addr in voters:\n        if addr == voter:\n            return True\n    return False\n\n\ndef hasVoted(hash, voter):\n    key = getKey(PRE_VOTED, hash)\n    info = Get(ctx, key)\n    if info == None:\n        return False\n    else:\n        voters = Deserialize(info)\n        for v in voters:\n            if v == voter:\n                return True\n    return False\n\n\ndef getKey(pre, hash):\n    '''\n    Gets the storage key for looking up a balance\n    :param address: The address to get the balance key for\n    '''\n    key = concat(pre, hash)  # pylint: disable=E0602\n    return key\n\n\ndef RequireWitness(address):\n    '''\n    Raises an exception if the given address is not a witness.\n    :param address: The address to check.\n    '''\n    Require(CheckWitness(address), \"Address is not witness\")\n\n\ndef Require(expr, message=\"There was an error\"):\n    '''\n    Raises an exception if the given expression is false.\n    :param expr: The expression to evaluate.\n    :param message: The error message to log.\n    '''\n    if not expr:\n        Log(message)\n        raise Exception(message)"